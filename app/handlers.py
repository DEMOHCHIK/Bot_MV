from aiogram import types, F, Router
import aiogram.filters as fl

from aiogram.fsm.context import FSMContext

from app.states import Gift, Partner
import app.keyboards as kb
import app.database.requests as rq

router = Router()


@router.message(fl.CommandStart())
async def cmd_start(message: types.Message):
    await rq.set_user(message.from_user.id, message.from_user.username)
    await message.answer('–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç—É–µ—Ç Gift Bot MV! –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –¥–æ–±–∞–≤—å—Ç–µ/–ø—Ä–∏–º–∏—Ç–µ —Å–≤–æ–µ–≥–æ –ø–∞—Ä—Ç–Ω—ë—Ä–∞!üòä‚ù§',
                         reply_markup=kb.start_reply_keyboard)


@router.message(F.text == '–ü—Ä–∏–Ω—è—Ç—å –ø–∞—Ä—Ç–Ω—ë—Ä–∞')
async def cmd_accepted_partners(message: types.Message):
    user_id = await rq.get_user_id(message.from_user.id)
    partner_record = await rq.check_accepted_partners(user_id)

    if partner_record:
        partner_1 = await rq.get_user(partner_record.partner_1)
        partner_2 = await rq.get_user(partner_record.partner_2)

        if partner_record.partner_1 == user_id:
            await message.answer(f'–í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ, –¥–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ–∫–∞ @{partner_2.username} –ø—Ä–∏–º–µ—Ç –µ–≥–æ.üòá')
        else:
            await message.answer(f'–ü—Ä–∏–º–∏—Ç–µ/–û—Ç–∫–ª–æ–Ω–∏—Ç–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —Å–≤–æ–µ–≥–æ –±—É–¥—É—â–µ–≥–æ –ø–∞—Ä—Ç–Ω—ë—Ä–∞ @{partner_1.username}:',
                                 reply_markup=kb.accepted_partner_reply_keyboard)
    else:
        await message.answer('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π –Ω–∞ –ø–∞—Ä—Ç–Ω—ë—Ä—Å—Ç–≤–æ.üò™')


# -- –ü–æ–¥—Ç–≤–µ–∂–¥–µ–Ω–∏–µ –ø–∞—Ä—Ç–Ω—ë—Ä—Å—Ç–≤–∞ --
@router.message(F.text == '–ü—Ä–∏–Ω—è—Ç—å')
async def cmd_accepted(message: types.Message):
    user_id = await rq.get_user_id(message.from_user.id)
    partner_record = await rq.check_accepted_partners(user_id)

    if partner_record:
        partner_1 = await rq.get_user(partner_record.partner_1)

        await rq.accepted_partners(partner_record.id)
        await message.answer(f'–í—ã –ø—Ä–∏–Ω—è–ª–∏ –ø–∞—Ä—Ç–Ω—ë—Ä—Å—Ç–≤–æ —Å @{partner_1.username}!ü•≥')
        await message.bot.send_message(
            chat_id=partner_1.tg_id,
            text=f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username}, –ø—Ä–∏–Ω—è–ª –ø–∞—Ä—Ç–Ω—ë—Ä—Å—Ç–≤–æ —Å –≤–∞–º–∏!ü•≥'
        )
    else:
        await message.answer('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π –Ω–∞ –ø–∞—Ä—Ç–Ω—ë—Ä—Å—Ç–≤–æ.üò™')


# -- –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø–∞—Ä—Ç–Ω—ë—Ä—Å—Ç–≤–∞ --
@router.message(F.text == '–û—Ç–∫–ª–æ–Ω–∏—Ç—å')
async def cmd_decline(message: types.Message):
    user_id = await rq.get_user_id(message.from_user.id)
    partner_record = await rq.check_accepted_partners(user_id)

    if partner_record:
        partner_1 = await rq.get_user(partner_record.partner_1)

        await rq.decline_partners(partner_record.id)
        await message.answer(f'–í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç @{partner_1.username}.üòî')
        await message.bot.send_message(
            chat_id=partner_1.tg_id,
            text=f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username} –æ—Ç–∫–ª–æ–Ω–∏–ª –≤–∞—à–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ.üòî'
        )
    else:
        await message.answer('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π –Ω–∞ –ø–∞—Ä—Ç–Ω—ë—Ä—Å—Ç–≤–æ.üò™')


@router.message(fl.Command(commands='menu'))
async def cmd_menu(message: types.Message):
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é:', reply_markup=kb.main_reply_keyboard)


@router.message(F.text == '–°–ø–∏—Å–æ–∫ –∂–µ–ª–∞–µ–º–æ–≥–æ(–ø–∞—Ä—Ç–Ω—ë—Ä–∞)')
async def cmd_partner_gifts_list(message: types.Message):
    user_id = await rq.get_user_id(message.from_user.id)
    partner_record = await rq.check_in_partners(user_id)

    if partner_record:
        partner_id = partner_record.partner_2 if partner_record.partner_1 == user_id else partner_record.partner_1
        partner_gifts_markup = await kb.gifts(partner_id)

        if partner_gifts_markup:
            await message.answer('–°–ø–∏—Å–æ–∫ –∂–µ–ª–∞–µ–º—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤ –≤–∞—à–µ–≥–æ –ø–∞—Ä—Ç–Ω—ë—Ä–∞:', reply_markup=partner_gifts_markup)
        else:
            await message.answer('–°–ø–∏—Å–æ–∫ –∂–µ–ª–∞–µ–º–æ–≥–æ –≤–∞—à–µ–≥–æ –ø–∞—Ä—Ç–Ω—ë—Ä–∞ –ø—É—Å—Ç..üò™')
    else:
        await message.answer('–£ –≤–∞—Å –Ω–µ—Ç –ø–∞—Ä—Ç–Ω—ë—Ä–∞..üò™')


@router.message(F.text == '–°–ø–∏—Å–æ–∫ –∂–µ–ª–∞–µ–º–æ–≥–æ(—Å–≤–æ–π)')
async def cmd_my_gifts_list(message: types.Message):
    user_id = await rq.get_user_id(message.from_user.id)
    user_gifts_markup = await kb.gifts(user_id)
    if user_gifts_markup:
        await message.answer('–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∂–µ–ª–∞–µ–º—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤:', reply_markup=user_gifts_markup)
    else:
        await message.answer('–í–∞—à —Å–ø–∏—Å–æ–∫ –∂–µ–ª–∞–µ–º–æ–≥–æ –ø—É—Å—Ç..üò™')


# -- –î–µ—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–æ—Å–º–æ—Ç—Ä –ü–æ–¥–∞—Ä–∫–∞ --
@router.callback_query(F.data.startswith('gift_'))
async def gift_callback(callback: types.CallbackQuery):
    gift_data = await rq.get_gift(callback.data.split('_')[1])
    await callback.answer(f'{gift_data.name}')
    await callback.message.answer(f'üéÅ{gift_data.name}\nüíª{gift_data.description}')


# -- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ü–æ–¥–∞—Ä–∫–∞ --
@router.message(F.text == '–î–æ–±–∞–≤–∏—Ç—å –∂–µ–ª–∞–µ–º–æ–µ')
async def cmd_add_gift(message: types.Message, state: FSMContext):
    await state.set_state(Gift.name)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∂–µ–ª–∞–µ–º–æ–≥–æ –ø–æ–¥–∞—Ä–∫–∞:')


@router.message(Gift.name)
async def cmd_add_gift_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(Gift.description)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∂–µ–ª–∞–µ–º–æ–≥–æ –ø–æ–¥–∞—Ä–∫–∞:')


@router.message(Gift.description)
async def cmd_add_gift_description(message: types.Message, state: FSMContext):
    await state.update_data(description=message.text)
    data = await state.get_data()

    name = data.get('name')
    description = data.get('description')
    user_tg_id = message.from_user.id

    await rq.create_gift(name, description, user_tg_id)

    await message.answer(f"–ñ–µ–ª–∞–µ–º—ã–π –ø–æ–¥–∞—Ä–æ–∫ '{name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!ü§©")
    await state.clear()


# -- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ü–∞—Ä—Ç–Ω—ë—Ä–∞ --
@router.message(F.text == '–î–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä—Ç–Ω—ë—Ä–∞')
async def cmd_add_partner(message: types.Message, state: FSMContext):
    user_id = await rq.get_user_id(message.from_user.id)
    partner_check = await rq.check_in_partners(user_id)

    if partner_check:
        partner_1 = await rq.get_user(partner_check.partner_1)
        partner_2 = await rq.get_user(partner_check.partner_2)

        if partner_check.accepted:
            if user_id == partner_1.id:
                await message.answer(f'–í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –ø–∞—Ä—Ç–Ω—ë—Ä—Å—Ç–≤–µ —Å @{partner_2.username}!ü•∞')
            else:
                await message.answer(f'–í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –ø–∞—Ä—Ç–Ω—ë—Ä—Å—Ç–≤–µ —Å @{partner_1.username}!ü•∞')
        else:
            if user_id == partner_check.partner_2:
                await message.answer(
                    f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{partner_1.username} —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª –≤–∞–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ –ø–∞—Ä—Ç–Ω—ë—Ä—Å—Ç–≤–µ. '
                    '–ù–∞–∂–º–∏—Ç–µ "–ü—Ä–∏–Ω—è—Ç—å"!üòâ',
                    reply_markup=kb.accepted_partner_reply_keyboard
                )
            else:
                await message.answer(
                    f'–í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ, –¥–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ–∫–∞ @{partner_2.username} –ø—Ä–∏–º–µ—Ç –µ–≥–æ.üòá'
                )
    else:
        await state.set_state(Partner.username)
        await message.answer('–í–≤–µ–¥–∏—Ç–µ @username –≤–∞—à–µ–≥–æ –±—É–¥—É—â–µ–≥–æ –ø–∞—Ä—Ç–Ω—ë—Ä–∞üßê')


@router.message(Partner.username)
async def cmd_search_partner(message: types.Message, state: FSMContext):
    await state.update_data(username=message.text.lstrip('@'))
    data = await state.get_data()

    username = data.get('username')
    user = await rq.search_user(username)

    partner_1_id = await rq.get_user_id(message.from_user.id)

    if user:
        if user.tg_id == message.from_user.id:
            await message.answer('–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Å–µ–±—è —Å–≤–æ–∏–º –ø–∞—Ä—Ç–Ω—ë—Ä–æ–º!ü§™')
            await state.clear()
            return
        else:
            await rq.add_partners_connection(partner_1_id, user.id)

            await message.answer(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{user.username} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ –ø–∞—Ä—Ç–Ω—ë—Ä—Å—Ç–≤–µ!ü§ó',
                                 reply_markup=kb.main_reply_keyboard)
            await message.bot.send_message(
                chat_id=user.tg_id,
                text=f'–í–∞–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –ø–∞—Ä—Ç–Ω—ë—Ä—ã –æ—Ç @{message.from_user.username}!üíû'
                     '\n–ù–∞–∂–º–∏—Ç–µ "–ü—Ä–∏–Ω—è—Ç—å"!üòâ',
                reply_markup=kb.accepted_partner_reply_keyboard
            )
    else:
        await message.answer('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–∞–∑–µ.üò≠'
                             '\n–ü–æ–ø—Ä–æ—Å–∏—Ç–µ –≤–∞—à–µ–≥–æ –±—É–¥—É—â–µ–≥–æ –ø–∞—Ä—Ç–Ω—ë—Ä–∞ –∑–∞–π—Ç–∏ –≤ –ë–æ—Ç–∞ –∏ –Ω–∞–∂–∞—Ç—å –°—Ç–∞—Ä—Ç.ü§≠')

    await state.clear()

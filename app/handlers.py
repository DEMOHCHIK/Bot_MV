from aiogram import types, F, Router
import aiogram.filters as fl

from aiogram.fsm.context import FSMContext

from app.states import NewGift
import app.keyboards as kb
import app.database.requests as rq

router = Router()


@router.message(fl.CommandStart())
async def cmd_start(message: types.Message):
    await rq.set_user(message.from_user.id, message.from_user.username)
    await message.answer('–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç—É–µ—Ç Gift Bot MV! –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –¥–æ–±–∞–≤—å—Ç–µ —Å–≤–æ–µ–≥–æ –ø–∞—Ä—Ç–Ω—ë—Ä–∞ –≤ —Å–∏—Å—Ç–µ–º—Éüòä‚ù§',
                         reply_markup=kb.start_reply_keyboard)


@router.message(fl.Command(commands='menu'))
async def cmd_menu(message: types.Message):
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω—Ç–∫ –º–µ–Ω—é:', reply_markup=kb.main_reply_keyboard)


@router.message(F.text == '–°–ø–∏—Å–æ–∫ –∂–µ–ª–∞–µ–º–æ–≥–æ(—Å–≤–æ–π)')
async def cmd_my_gifts_list(message: types.Message):
    user_id = message.from_user.id
    user_gifts_markup = await kb.gifts(user_id)
    if user_gifts_markup:
        await message.answer('–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∂–µ–ª–∞–µ–º—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤:', reply_markup=user_gifts_markup)
    else:
        await message.answer("–í–∞—à —Å–ø–∏—Å–æ–∫ –∂–µ–ª–∞–µ–º–æ–≥–æ –ø—É—Å—Çüò™")

# -- –î–µ—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–æ—Å–º–æ—Ç—Ä –ü–æ–¥–∞—Ä–∫–∞ --
@router.callback_query(F.data.startswith('gift_'))
async def gift_callback(callback: types.CallbackQuery):
    gift_data = await rq.get_gift(callback.data.split('_')[1])
    await callback.answer(f'{gift_data.name}')
    await callback.message.answer(f'üéÅ{gift_data.name}\nüíª{gift_data.description}')


# -- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ü–æ–¥–∞—Ä–∫–∞ --
@router.message(F.text == '–î–æ–±–∞–≤–∏—Ç—å –∂–µ–ª–∞–µ–º–æ–µ')
async def cmd_add_gift(message: types.Message, state: FSMContext):
    await state.set_state(NewGift.name)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∂–µ–ª–∞–µ–º–æ–≥–æ –ø–æ–¥–∞—Ä–∫–∞:")


@router.message(NewGift.name)
async def cmd_add_gift_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(NewGift.description)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∂–µ–ª–∞–µ–º–æ–≥–æ –ø–æ–¥–∞—Ä–∫–∞:")


@router.message(NewGift.description)
async def cmd_add_gift_description(message: types.Message, state: FSMContext):
    await state.update_data(description=message.text)
    data = await state.get_data()

    name = data.get('name')
    description = data.get('description')
    author_id = message.from_user.id

    await rq.create_gift(name, description, author_id)

    await message.answer(f"–ñ–µ–ª–∞–µ–º—ã–π –ø–æ–¥–∞—Ä–æ–∫ '{name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!ü§©")
    await state.clear()
